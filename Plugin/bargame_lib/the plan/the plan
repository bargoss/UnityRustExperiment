THE GAME:
Spawn things via cards:
    Barracks<unit type>:
        -spawns k units per seconds, can have up to n units
        -drag and drop from Barracks to support or attack nearby structures or positions
    MineStation:
        -generates resources over time
        -has to be built on top of a resource
        -drag and drop from MineStation to support builder bases nearby or send workers
        -or to support friendly structure via repairing
    Units<unit type>:
        -units spawned from cards have limited lifespans
        -supports the units or building it was dropped next to
    BuilderBase:
        -spawns up to n builder units
        -builders can reach up to m distance from the base
        -drag and drop from BuilderBase to support nearby structures











DONE    -   looks like interpolated position component is not a good idea nor needed
----    -   need to figure how to avoid having same time keyframe duplicates in the snapshot interpolation buffers

DONE    -   do the id->entity synchronization system
DONE    -   test out the view interpolation stuff with the game_world

prediction seperation:
    do it with PredictedTag:
        -need to figure out which entities to set this tag on and retain that info during deserialization





----    -   a partial rollback demo is needed
----    -   static objects in physics world
----    -   collider without velocity needs to be treated as a "static" collider, it won't move during collisions
CANCEL  -   move the rollback controller from c# to here (only serialization and interpolation will be here for now)
DONE    -   ecs world needed
DONE    -   physics system needed

----    -   figure out what to do when a player takes too long to send an input
            options are:
            -   stop the time and wait for the player (easiest option)
            -   stop the game (not a good idea for more than two players)
            -   just have a server (backend complexity)
            -   make a p2p consensus system (learn valuable stuff)
                that gives us synced info on which players have become inactive in which tick
                so all the other peers know when a players inputs are invalidated and the game will will continue without them

