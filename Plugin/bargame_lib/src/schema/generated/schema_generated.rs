// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod example {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AuthorOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Author<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Author<'a> {
  type Inner = Author<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Author<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_NAME: flatbuffers::VOffsetT = 6;
  pub const VT_BIRTH_YEAR: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Author { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args AuthorArgs<'args>
  ) -> flatbuffers::WIPOffset<Author<'bldr>> {
    let mut builder = AuthorBuilder::new(_fbb);
    builder.add_id(args.id);
    if let Some(x) = args.name { builder.add_name(x); }
    builder.add_birth_year(args.birth_year);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Author::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Author::VT_NAME, None)}
  }
  #[inline]
  pub fn birth_year(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(Author::VT_BIRTH_YEAR, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Author<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<u16>("birth_year", Self::VT_BIRTH_YEAR, false)?
     .finish();
    Ok(())
  }
}
pub struct AuthorArgs<'a> {
    pub id: u64,
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub birth_year: u16,
}
impl<'a> Default for AuthorArgs<'a> {
  #[inline]
  fn default() -> Self {
    AuthorArgs {
      id: 0,
      name: None,
      birth_year: 0,
    }
  }
}

pub struct AuthorBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> AuthorBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Author::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Author::VT_NAME, name);
  }
  #[inline]
  pub fn add_birth_year(&mut self, birth_year: u16) {
    self.fbb_.push_slot::<u16>(Author::VT_BIRTH_YEAR, birth_year, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AuthorBuilder<'a, 'b> {
    let start = _fbb.start_table();
    AuthorBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Author<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Author<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Author");
      ds.field("id", &self.id());
      ds.field("name", &self.name());
      ds.field("birth_year", &self.birth_year());
      ds.finish()
  }
}
pub enum BookOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Book<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Book<'a> {
  type Inner = Book<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Book<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_TITLE: flatbuffers::VOffsetT = 6;
  pub const VT_PUBLICATION_YEAR: flatbuffers::VOffsetT = 8;
  pub const VT_AUTHOR_ID: flatbuffers::VOffsetT = 10;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Book { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args BookArgs<'args>
  ) -> flatbuffers::WIPOffset<Book<'bldr>> {
    let mut builder = BookBuilder::new(_fbb);
    builder.add_author_id(args.author_id);
    builder.add_id(args.id);
    if let Some(x) = args.title { builder.add_title(x); }
    builder.add_publication_year(args.publication_year);
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Book::VT_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn title(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Book::VT_TITLE, None)}
  }
  #[inline]
  pub fn publication_year(&self) -> u16 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u16>(Book::VT_PUBLICATION_YEAR, Some(0)).unwrap()}
  }
  #[inline]
  pub fn author_id(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(Book::VT_AUTHOR_ID, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for Book<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u64>("id", Self::VT_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("title", Self::VT_TITLE, false)?
     .visit_field::<u16>("publication_year", Self::VT_PUBLICATION_YEAR, false)?
     .visit_field::<u64>("author_id", Self::VT_AUTHOR_ID, false)?
     .finish();
    Ok(())
  }
}
pub struct BookArgs<'a> {
    pub id: u64,
    pub title: Option<flatbuffers::WIPOffset<&'a str>>,
    pub publication_year: u16,
    pub author_id: u64,
}
impl<'a> Default for BookArgs<'a> {
  #[inline]
  fn default() -> Self {
    BookArgs {
      id: 0,
      title: None,
      publication_year: 0,
      author_id: 0,
    }
  }
}

pub struct BookBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> BookBuilder<'a, 'b> {
  #[inline]
  pub fn add_id(&mut self, id: u64) {
    self.fbb_.push_slot::<u64>(Book::VT_ID, id, 0);
  }
  #[inline]
  pub fn add_title(&mut self, title: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Book::VT_TITLE, title);
  }
  #[inline]
  pub fn add_publication_year(&mut self, publication_year: u16) {
    self.fbb_.push_slot::<u16>(Book::VT_PUBLICATION_YEAR, publication_year, 0);
  }
  #[inline]
  pub fn add_author_id(&mut self, author_id: u64) {
    self.fbb_.push_slot::<u64>(Book::VT_AUTHOR_ID, author_id, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> BookBuilder<'a, 'b> {
    let start = _fbb.start_table();
    BookBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Book<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Book<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Book");
      ds.field("id", &self.id());
      ds.field("title", &self.title());
      ds.field("publication_year", &self.publication_year());
      ds.field("author_id", &self.author_id());
      ds.finish()
  }
}
pub enum LibraryOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Library<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Library<'a> {
  type Inner = Library<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Library<'a> {
  pub const VT_AUTHORS: flatbuffers::VOffsetT = 4;
  pub const VT_BOOKS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Library { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args LibraryArgs<'args>
  ) -> flatbuffers::WIPOffset<Library<'bldr>> {
    let mut builder = LibraryBuilder::new(_fbb);
    if let Some(x) = args.books { builder.add_books(x); }
    if let Some(x) = args.authors { builder.add_authors(x); }
    builder.finish()
  }


  #[inline]
  pub fn authors(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Author<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Author>>>>(Library::VT_AUTHORS, None)}
  }
  #[inline]
  pub fn books(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Book<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Book>>>>(Library::VT_BOOKS, None)}
  }
}

impl flatbuffers::Verifiable for Library<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Author>>>>("authors", Self::VT_AUTHORS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Book>>>>("books", Self::VT_BOOKS, false)?
     .finish();
    Ok(())
  }
}
pub struct LibraryArgs<'a> {
    pub authors: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Author<'a>>>>>,
    pub books: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Book<'a>>>>>,
}
impl<'a> Default for LibraryArgs<'a> {
  #[inline]
  fn default() -> Self {
    LibraryArgs {
      authors: None,
      books: None,
    }
  }
}

pub struct LibraryBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> LibraryBuilder<'a, 'b> {
  #[inline]
  pub fn add_authors(&mut self, authors: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Author<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Library::VT_AUTHORS, authors);
  }
  #[inline]
  pub fn add_books(&mut self, books: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Book<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Library::VT_BOOKS, books);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> LibraryBuilder<'a, 'b> {
    let start = _fbb.start_table();
    LibraryBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Library<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Library<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Library");
      ds.field("authors", &self.authors());
      ds.field("books", &self.books());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `Library`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_library_unchecked`.
pub fn root_as_library(buf: &[u8]) -> Result<Library, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<Library>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `Library` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_library_unchecked`.
pub fn size_prefixed_root_as_library(buf: &[u8]) -> Result<Library, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<Library>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `Library` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_library_unchecked`.
pub fn root_as_library_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Library<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<Library<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `Library` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_library_unchecked`.
pub fn size_prefixed_root_as_library_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<Library<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<Library<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a Library and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `Library`.
pub unsafe fn root_as_library_unchecked(buf: &[u8]) -> Library {
  flatbuffers::root_unchecked::<Library>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed Library and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `Library`.
pub unsafe fn size_prefixed_root_as_library_unchecked(buf: &[u8]) -> Library {
  flatbuffers::size_prefixed_root_unchecked::<Library>(buf)
}
#[inline]
pub fn finish_library_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Library<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_library_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<Library<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod Example

